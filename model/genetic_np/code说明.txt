文件说明：
constants:\\

futures.py : 期货基础信息，包括目前交易的期货品种，中英文名对应，交易时间段，合约与windcode对应等
genetic.py ： 遗传规划 config dict的key与默认value，目前还在更新阶段
path.py ： 输入的数据的特征所在文件夹，输入的return的所在的文件夹，输出的因子值所在的文件夹

genetic：\\

gp_input_data_processed.py: 从数据库中读取基础的量价数据，存成csv，保存在本地

run.py: anaconda prompt 通过命令行运行，可以循环跑遗传规划


function.py ： 遗传规划project中用到的一些其他函数：如数据拆分函数（一天隔一天拆分，固定时间段拆分等），不同类别遗传规划结果保存的函数（开发中）

gp_operator.py: 遗传规划算子函数，主要分为以下几个类别：

1. df_ 开头： dataframe整体的基础运算，如加减乘除
2. ts_roll 开头：  dataframe每一列根据时序上的参数n进行滚动的相应计算，每一列单独计算，列与列之间无关（除了算correlation，covariance之类的）
3. int_ 开头： 自己设置的整型数函数，可以被遗传规划调用在函数参数
4. float_ 开头： 自己设置的浮点数函数，可以被遗传规划调用在函数里
5. ti_  开头： 根据技术形态设置的形态识别的函数，如果满足形态，value=1 否则 value=0， 目前还在开发中


fitness_function.py : 遗传规划适应度函数， input一般是2个，遗传规划输出的值（因子或仓位），预测的收益率； 根据适应度函数计算，目前已写的2个适应度函数是 max（sum(abs(ic)）） 与 max（夏普+收益率）


GP.py： 遗传规划project主体

class DataObj: 基础数据class， attribution 为数据特征，
a=DataObj(config_dict)
print(a.close,a.volume,a.high)

GeneticProgrammingData: 遗传规划的数据class，自动将数据根据需要的方法分成训练集与测试集
a=GeneticProgrammingData(config_dict)
训练集： a.train_data.close, a.train_data.ret,
测试集： a.test_data.close, a.test_data.ret,
所有数据： a.all_data.close, a.all_data.ret

GeneticProgramming： 继承GeneticProgrammingData， 增加了初始化pset和toolbox属性，添加了gp_main()方法
pset是设置遗传规划的基础，比如输入结构，输出结构，函数算子，引入常数
toolbox是设置遗传规划的参数， 比如 fitness函数越大越好还是越小越好，fitness函数是什么， 变异的方法，交叉的方法及其对应的概率，遗传规划结果的树的最大深度与最小深度

gp_main（）： 在配置好遗传规划以上2个基础属性后，就可以通过gp_main去运行遗传规划，得到pop是存储遗传规划结果的



gp_main.py: 遗传规划 main函数，主要包含2部分，第一部分是遗传规划参数的设置，保存在config_dict，第二部分是遗传规划结果保存在本地（不同类型的遗传规划，保存方法不同，保存的结果与统计量也不同）

目前还没将保存方法剥离开，后续会将保存方法剥离，放入function.py中，然后加入调用


### 目前在写根据技术指标识别模式然后直接出仓位的遗传规划架构，原本想将DataObj传入函数，但是框架目前没跑通，后续先跑通后，再做框架的整理







