import sys

sys.path.append('..')
sys.path.append('C:\\Users\\jason.huang\\PycharmProjects\\PinPoint_v2')

import model.constants.futures as ConstFutBasic
from model.genetic.GP import GeneticProgrammingData

# config_dict_ts_factor = {'strategy_name': 'interest_rate_future_ts_factor_strategy',
#                          'tickers_group': 'cm_cn_group_interest_rate',
#                          'tickers': ['T.CFE', 'TF.CFE', 'TS.CFE'],
#                          'start_date': '2018-01-01',
#                          'end_date': '2022-01-01',
#                          'out_of_sample_date': '2022-09-30',
#                          'freq': '1D',
#                          'ret': 'close',
#                          'split_method': {'method': 'every_other_row'},
#                          'feature': ['open', 'close', 'high', 'low', 'volume', 'oi', 'historical_vol', 'dastd',
#                                      'settle', 'pct1', 'pct2',
#                                      'pct3', 'pct4', 'amount', 'carry_pct', 'vwap'],
#                          'gp_schema': 'factor_ic',
#                          'gp_operator': ['df_add', 'df_diff_lag_1', 'df_div', 'df_divabs', 'df_identy', 'df_lag_1',
#                                          'df_lag_n', 'df_mul',
#                                          'df_negative', 'df_sub',
#                                          'int_1', 'int_10', 'int_1000', 'int_11', 'int_12', 'int_120', 'int_13',
#                                          'int_14', 'int_15',
#                                          'int_16', 'int_2', 'int_20', 'int_252', 'int_3', 'int_30', 'int_4', 'int_40',
#                                          'int_5', 'int_504',
#                                          'int_6', 'int_60', 'int_7', 'int_8', 'int_9', 'int_90',
#                                          'ts_roll_acceleration', 'ts_roll_bias', 'ts_roll_bias_div_mean',
#                                          'ts_roll_bias_div_std',
#                                          'ts_roll_bias_pct', 'ts_roll_coef_variation', 'ts_roll_coef_variation_abs',
#                                          'ts_roll_corr',
#                                          'ts_roll_corr_lag1diff', 'ts_roll_cov', 'ts_roll_kurt', 'ts_roll_max',
#                                          'ts_roll_mean',
#                                          'ts_roll_mean_pct', 'ts_roll_mean_pct_diff', 'ts_roll_min', 'ts_roll_skew',
#                                          'ts_roll_std',
#                                          'ts_roll_sum', 'ts_roll_zscore'],
#                          'WeightingFunction': 'tanh',
#                          'strategy_param': {'max_num': 10, 'order_feature': 'volume'},
#                          'FitnessMaxStatsFunction': 'strategy_nv_indicator_annual_ir',
#                          'gp_initial_param': {'EphemeralConstantIntNum': 1, 'EphemeralConstantIntMin': 1,
#                                               'EphemeralConstantIntMax': 25, 'EphemeralConstantFloatNum': 0,
#                                               'EphemeralConstantFloatMin': 0,
#                                               'EphemeralConstantFloatMax': 1},
#                          'gp_run_param': {'population_num': 1000, 'max_depth': 5, 'min_depth': 2, 'cxpb': 0.5,
#                                           'mutpb': 0.2, 'ngen': 2},
#
#                          'toolbox_param': {'select_mode': "tools.selTournament", "select_tournsize": 4,
#                                            "mate_mode": 'gp.cxOnePoint',
#                                            "expr_mut_model": 'gp.genFull', "expr_mut_genFull_min": 3,
#                                            "expr_mut_genFull_max": 6,
#                                            "mutate_mode": "gp.mutUniform", "mutate_expr": 'toolbox.expr_mut',
#                                            "mate_max": 2,
#                                            "mutate_max": 2,
#                                            "expr_mode": "gp.genHalfAndHalf", "individual_mode": "tools.initIterate",
#                                            "population_mode": "tools.initRepeat"},
#                          'record_num': 500}

# config_dict_pattern = {
#     'tickers': ['IC.CFE', 'IH.CFE', 'IF.CFE'],
#     'start_date': '2018-01-01',
#     'end_date': '2022-01-01',
#     'out_of_sample_date': '2022-09-30',
#     'freq': '1D',
#     'ret': 'close',
#     # 'split_method': {'method': 'ts_split', 'ratio': 0.8},
#     'split_method': {'method': 'every_other_row'},
#     'feature': ['open', 'close', 'high', 'low', 'volume'],
#     'gp_schema': 'pattern_recognition',
#     'gp_operator': ['ti_close_below_ma', 'ti_close_highest', 'ti_close_jump_high', 'ti_close_jump_high_n',
#                     'ti_close_jump_low', 'ti_close_jump_low_n', 'ti_close_lowest', 'ti_close_movedist_ratio',
#                     'ti_close_new_high', 'ti_close_new_low', 'ti_close_over_mean', 'ti_cross_star',
#                     'ti_cross_star_n', 'ti_ever_positive', 'ti_green_k', 'ti_green_k_n',
#                     'ti_high_new_high', 'ti_k_longer', 'ti_k_shorter', 'ti_lag',
#                     'ti_long_down_shadow', 'ti_long_down_shadow_n', 'ti_long_up_shadow', 'ti_long_up_shadow_n',
#                     'ti_low_new_low', 'ti_ma1_over_ma2', 'ti_n_day_up', 'ti_n_k_longer',
#                     'ti_n_k_shorter', 'ti_neg', 'ti_never_positive', 'ti_oc_grt_n_max',
#                     'ti_oc_grt_n_mean', 'ti_oc_ls_n_min', 'ti_open_higher', 'ti_open_highest',
#                     'ti_open_jump_high', 'ti_open_jump_high_n', 'ti_open_jump_low', 'ti_open_jump_low_n',
#                     'ti_open_lower', 'ti_open_lowest', 'ti_positive_num', 'ti_price_up',
#                     'ti_red_k', 'ti_red_k_n', 'ti_sh_grt_n_max', 'ti_sh_grt_n_mean',
#                     'ti_sh_ls_n_min', 'ti_short_down_shadow', 'ti_short_down_shadow_n', 'ti_short_up_shadow',
#                     'ti_short_up_shadow_n',
#                     'int_1', 'int_10', 'int_1000', 'int_11', 'int_12', 'int_120', 'int_13', 'int_14', 'int_15',
#                     'int_16', 'int_2', 'int_20', 'int_252', 'int_3', 'int_30', 'int_4', 'int_40', 'int_5', 'int_504',
#                     'int_6', 'int_60', 'int_7', 'int_8', 'int_9', 'int_90',
#                     'float_001', 'float_002', 'float_003', 'float_004', 'float_005', 'float_006', 'float_007',
#                     'float_008', 'float_009', 'float_01', 'float_015', 'float_02', 'float_025', 'float_03', 'float_035',
#                     'float_04', 'float_045', 'float_05', 'float_06', 'float_07', 'float_08', 'float_09',
#                     'both', 'both3', 'both4', 'both5', 'either'],
#     'WeightingFunction': 'identity',
#     'strategy_param': {'max_num': 10, 'order_feature': 'volume'},
#     'FitnessMaxStatsFunction': 'strategy_nv_indicator_annual_ir',
#     'gp_initial_param': {'EphemeralConstantIntNum': 15, 'EphemeralConstantIntMin': 1,
#                          'EphemeralConstantIntMax': 25, 'EphemeralConstantFloatNum': 10,
#                          'EphemeralConstantFloatMin': 0,
#                          'EphemeralConstantFloatMax': 1},
#
#     'gp_run_param': {'population_num': 100, 'max_depth': 30, 'min_depth': 20, 'cxpb': 0.5, 'mutpb': 0.2, 'ngen': 5},
#     'toolbox_param': {'select_mode': "tools.selTournament", "select_tournsize": 4, "mate_mode": 'gp.cxOnePoint',
#                       "expr_mut_model": 'gp.genFull', "expr_mut_genFull_min": 4, "expr_mut_genFull_max": 10,
#                       "mutate_mode": "gp.mutUniform", "mutate_expr": 'toolbox.expr_mut', "mate_max": 8, "mutate_max": 8,
#                       "expr_mode": "gp.genHalfAndHalf", "individual_mode": "tools.initIterate",
#                       "population_mode": "tools.initRepeat"},
#     'record_num': 500
# }

from model.genetic.config_list import config_naming_func

config_dict_pattern = config_naming_func(strategy_name='ts_factor', population_num=200, ngen=2,
                                         tickers_group_name='cm_cn_group_stock_index', gp_schema='pattern_recognition')
# data_obj = GeneticProgrammingData(config_dict_pattern).train_data
